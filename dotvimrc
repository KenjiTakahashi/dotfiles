"Karol 'Kenji Takahashi' Woźniak © 2012 - 2013

set nocompatible
filetype off

if has('nvim')
    runtime! plugin/python_setup.vim
endif

"vundle
"Added (almost) on top, so vim can properly see color schemes
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

Plugin 'gmarik/Vundle.vim'
Plugin 'kien/ctrlp.vim'
Plugin 'lettuce.vim'
Plugin 'w0ng/vim-hybrid'
Plugin 'scrooloose/syntastic'
Plugin 'scrooloose/nerdtree'
Plugin 'surround.vim'
Plugin 'kchmck/vim-coffee-script'
Plugin 'tpope/vim-markdown'
Plugin 'SirVer/ultisnips'
Plugin 'honza/vim-snippets'
Plugin 'mattn/webapi-vim'
Plugin 'mattn/gist-vim'
Plugin 'wavded/vim-stylus'
Plugin 'Rykka/easydigraph.vim'
Plugin 'bling/vim-airline'
Plugin 'b4winckler/vim-objc'
Plugin 'tpope/vim-fugitive'
Plugin 'YankRing.vim'
Plugin 'sjl/gundo.vim'
Plugin 'Valloric/YouCompleteMe'
Plugin 'mhinz/vim-signify'
Plugin 'xolox/vim-misc'
" Plugin 'xolox/vim-easytags'
Plugin 'Lokaltog/vim-easymotion'
Plugin 'Shirk/vim-gas'
Plugin 'fatih/vim-go'
Plugin 'peterhoeg/vim-qml'
Plugin 'cespare/vim-toml'
Plugin 'chase/vim-ansible-yaml'
Plugin 'jaxbot/semantic-highlight.vim'
Plugin 'tomtom/tcomment_vim'
Plugin 'junegunn/vim-easy-align'
Plugin 'baskerville/vim-sxhkdrc'
Plugin 'wting/rust.vim'

call vundle#end()

set t_Co=256
let g:hybrid_use_Xresources=1
colorscheme hybrid

"allow backspacing over everything in insert mode
set backspace=indent,eol,start

if has("vms")
    "do not keep backup file use versions instead
    set nobackup
else
    "keep a backup file
    set backup
endif
set history=50
set ruler
set showcmd
set incsearch

"Do not use Ex mode, use Q for formatting
map Q gq

"CTRL-U in insert mode deletes a lot. Use CTRL-G u to first break undo,
"so that you can undo CTRL-U after inserting a line break.
inoremap <C-U> <C-G>u<C-U>

if &t_Co > 2 || has("gui_running")
  syntax on
  set hlsearch
endif

if has("autocmd")
    filetype plugin indent on

    "Put these in an autocmd group, so that we can delete them easily.
    augroup vimrcEx
    au!

    "For all text files set 'textwidth' to 78 characters.
    autocmd FileType text setlocal textwidth=78

    "When editing a file, always jump to the last known cursor position.
    "Don't do it when the position is invalid or when inside an event handler
    "(happens when dropping a file on gvim).
    "Also don't do it when the mark is in the first line, that is the default
    "position when opening a file.
    autocmd BufReadPost *
    \ if line("'\"") > 1 && line("'\"") <= line("$") |
    \   exe "normal! g`\"" |
    \ endif

    augroup END
else
    set autoindent
endif

"Convenient command to see the difference between the current buffer and the
"file it was loaded from, thus the changes you made.
"Only define it when not defined already.
if !exists(":DiffOrig")
  command DiffOrig vert new | set bt=nofile | r # | 0d_ | diffthis
          \ | wincmd p | diffthis
endif

set encoding=utf-8

autocmd FilterWritePre * if &diff | setlocal wrap< | endif

set tabstop=4
set shiftwidth=4
set softtabstop=4
set completeopt=menu,preview
set expandtab
autocmd FileType jade set sw=4
autocmd FileType stylus set sw=4
autocmd FileType yaml set sw=2 ts=2 sts=2
autocmd FileType go set noexpandtab
autocmd BufNewFile,BufRead *.m set ft=objc
autocmd BufNewFile,BufRead *.mm set ft=objc

let g:Tb_MapWindowNavVim=1
let g:Tb_MapWindowNavArrows=1
let mapleader = ","

" no blink, even in GUI
set guicursor=a:blinkon0

set number
set pastetoggle=<F2>

"NERDTree
let g:NERDTreeWinSize=32
let g:NERDTreeWinPos="left"
let g:NERDTreeAutoCenter=0
let g:NERDTreeHighlightCursorLine=0
nmap <F11> :NERDTreeToggle<bar>wincmd p<CR>

"buffers
noremap gt :bnext<CR>
noremap gT :bprev<CR>
noremap gc :bn<bar>bd # <CR>

"CtrlP
let g:ctrlp_match_window_reversed=0
let g:ctrlp_max_height=20
let g:ctrlp_dotfiles=0
let g:ctrlp_switch_buffer=0
let g:ctrlp_extensions=['buffertag']
let g:ctrlp_map='mf'
let g:ctrlp_buftag_types = {'objc': '--language-force=ObjectiveC'}
nmap <silent> mb :CtrlPBuffer<CR>
nmap <silent> mt :CtrlPBufTagAll<CR>
nmap <silent> mr :CtrlPMRU<CR>
set wildignore+=*~
set wildignore+=node_modules
set wildignore+=build
set wildignore+=dist
set wildignore+=*.o

"YankRing
let g:yankring_window_height=20
let g:yankring_history_file='.yankring_history'
noremap <silent> yr :YRShow<CR>

"gundo
nnoremap go :GundoToggle<CR>

"insert coding to python/ruby files
au BufNewFile *.py put! ='# -*- coding: utf-8 -*-'
au BufNewFile *.rb put! ='# coding: utf-8'

"adding timestamp
nnoremap ts "=strftime("%d %B %Y, %R")<CR>P

map <F1> <Esc>
imap <F1> <Esc>

let g:syntastic_enabled_balloons=0

"pyflakes for python2
au BufRead *.py let g:syntastic_python_flake8_exe='flake8-python2'

"objcpp=>objc
au FileType objcpp set ft=objc

let g:EasyDigraph_imap='<C-b>'

set laststatus=2
let g:airline_left_sep=''
let g:airline_right_sep=''
let g:airline_mode_map = {
    \ '__' : '-',
    \ 'n'  : 'n',
    \ 'i'  : 'i',
    \ 'R'  : 'r',
    \ 'c'  : 'c',
    \ 'v'  : 'v',
    \ 'V'  : 'v⋅l',
    \ '' : 'v⋅b',
    \ 's'  : 's',
    \ 'S'  : 's⋅l',
    \ '' : 's⋅b',
\ }
let g:airline_exclude_preview=1
let g:airline#extensions#tagbar#enabled=0
let g:airline#extensions#csv#enabled=0

let g:UltiSnipsExpandTrigger="<c-j>"

let g:ycm_allow_changing_updatetime=0
let g:ycm_autoclose_preview_window_after_completion=1
let g:ycm_enable_diagnostic_signs=0

let g:signify_vcs_list=['git']
let g:signify_sign_overwrite=0

nnoremap <leader><leader>d :YcmCompleter GoToDefinitionElseDeclaration<CR>

let g:go_disable_autoinstall=1
let g:go_fmt_command="goimports"
let g:go_fmt_fail_silently=1

nnoremap <Leader>s :SemanticHighlightToggle<cr>
au BufNewFile,BufRead *.go let g:blacklist = [
    \'if', 'func', 'make', 'for',
    \'range', 'panic', 'len', 'nil',
    \'interface', 'map', 'string',
    \'byte', 'return', 'true', 'false',
    \'package', 'import', 'bool', 'type',
    \'struct', 'var', 'int64', 'uint', 'int',
\ ]

let g:tcommentMapLeaderOp1=',c'

vmap <Enter> <Plug>(EasyAlign)
nmap <Leader>a <Plug>(EasyAlign)

set tags=./.vimtags;
let g:easytags_dynamic_files=2
